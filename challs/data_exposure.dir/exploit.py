#!/usr/bin/python3

import subprocess
import sys

from time import sleep


def run_cmd(correction_file, args):
    args.insert(0, correction_file)

    if correction_file.endswith('.py'):
        args.insert(0, 'python3')
    elif correction_file.endswith('.pl'):
        args.insert(0, 'perl')
    elif correction_file.endswith('.go'):
        args.insert(0, 'run')
        args.insert(0, 'go')

    child = subprocess.Popen(args, stdout=subprocess.PIPE)
    streamdata = child.communicate()[0]
    ret = child.returncode
    return streamdata.decode(), ret


def exploit(correction_file):
    """
        Check if the corrected source code is still vulnerable
    """
    with open('key') as key_f:
        key = key_f.read()

    content, code = run_cmd(correction_file, ['s'])
    if key in content:
        print('Your API is leaking the key!\n')
        return True

    outputs = set()
    for i in range(20):
        out, _ = run_cmd(correction_file, [''])
        outputs.add(out)
        if len(outputs) != i+1:
            print("The IV should be contained in the answer because it is needed to decode the payload, "
                  "but it should be unpredictable!")
            return True

    return False


def main():
    correction_file = sys.argv[2]
    return_code = 3 if exploit(correction_file) else 0
    sys.exit(return_code)


if __name__ == "__main__":
    main()
